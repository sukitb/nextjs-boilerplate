name: CI/CD Pipeline

on:
  push:
    branches:
      - production # FIXME: Change this to your default production branch

env:
  AWS_REGION: ap-southeast-1 # FIXME: set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: nextjs-boilerplate # FIXME: set this to your Amazon ECR repository name
  ECS_SERVICE: NextjsBoilerplate # FIXME: set this to your Amazon ECS service name
  ECS_CLUSTER: NextjsBoilerplateCluster # FIXME: set this to your Amazon ECS cluster name
  TASK_DEFINITION_FAMILY: NextjsBoilerplate # FIXME: set this to your task definition family name
  CONTAINER_NAME: nextjs-boilerplate # FIXME: set this to the name of the container in the containerDefinitions section of your task definition

jobs:
  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: unit-test # This ensures the e2e-test job runs only if the unit-test job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Start application server
        run: |
          npm run build
          npm start &
        env:
          PORT: 3000

      - name: Wait for server to be ready
        run: |
          # Wait for the server to be ready
          npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Stop application server
        run: |
          # Stop the server
          kill $(jobs -p)

  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    needs: [unit-test, e2e-test] # This ensures the deploy job runs only if both the unit-test and e2e-test jobs succeed
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container using Makefile and push it to ECR.
          make build-production
          docker tag nextjs-boilerplate:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          # Download the task definition file from Amazon ECS
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
